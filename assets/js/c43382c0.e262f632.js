"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8123],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,h=m["".concat(o,".").concat(d)]||m[d]||p[d]||l;return r?n.createElement(h,s(s({ref:t},c),{},{components:r})):n.createElement(h,s({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,s=new Array(l);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<l;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4338:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const l={},s="Methods",i={unversionedId:"guides/miscellaneous/methods",id:"guides/miscellaneous/methods",title:"Methods",description:"There is support for structs with methods. Both static methods, and non-static methods are supported.",source:"@site/docs/guides/miscellaneous/methods.md",sourceDirName:"guides/miscellaneous",slug:"/guides/miscellaneous/methods",permalink:"/flutter_rust_bridge/guides/miscellaneous/methods",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/miscellaneous/methods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Directory structure (multi-file)",permalink:"/flutter_rust_bridge/guides/miscellaneous/directory"},next:{title:"Callables",permalink:"/flutter_rust_bridge/guides/miscellaneous/callables"}},o={},u=[{value:"Methods in external crates",id:"methods-in-external-crates",level:2},{value:"Example",id:"example",level:2},{value:"Example 1: Methods in same crate",id:"example-1-methods-in-same-crate",level:3},{value:"Example 2: Methods in external crates",id:"example-2-methods-in-external-crates",level:3}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"methods"},"Methods"),(0,a.kt)("p",null,"There is support for structs with methods. Both static methods, and non-static methods are supported.\nNo special syntax is needed, and just write normal ",(0,a.kt)("inlineCode",{parentName:"p"},"impl YourStruct { pub fn your_method() {} }"),"."),(0,a.kt)("h2",{id:"methods-in-external-crates"},"Methods in external crates"),(0,a.kt)("p",null,"For methods that are not defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"rust_input")," folders in the current crate,\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"#[frb(external)]")," syntax (see example below) is needed to make flutter_rust_bridge aware of the methods."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("h3",{id:"example-1-methods-in-same-crate"},"Example 1: Methods in same crate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct SumWith { pub x: u32 }\n\nimpl SumWith {\n    pub fn sum(&self, y: u32) -> u32 { self.x + y }\n    pub fn sum_static(x: u32, y: u32) -> u32 { x + y }\n}\n")),(0,a.kt)("p",null,"Becomes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class SumWith {\n  final int x;\n\n  const SumWith({\n    required this.x,\n  });\n\n  Future<int> sum({required int y, dynamic hint}) { ... }\n\n  static Future<int> sumStatic({required int x, required int y, dynamic hint}) { ... }\n}\n")),(0,a.kt)("p",null,"Remark: If you are curious about ",(0,a.kt)("inlineCode",{parentName:"p"},"Future"),", have a look at ",(0,a.kt)("a",{parentName:"p",href:"../concurrency/async-dart"},"this"),"."),(0,a.kt)("h3",{id:"example-2-methods-in-external-crates"},"Example 2: Methods in external crates"),(0,a.kt)("p",null,"Suppose we have these in external crates:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct MyExternalStruct {\n    ...\n}\n\nimpl MyExternalStruct {\n    pub fn simple_external_method(&self) -> String {\n        // ... some long implementations ...\n    }\n}\n")),(0,a.kt)("p",null,"Then, we only need to repeat the function signatures in our main crate as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[frb(external)]\nimpl MyExternalStruct {\n    pub fn simple_external_method(&self) -> String {}\n}\n")),(0,a.kt)("p",null,"Remark: Just leave the function body empty (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"{}"),"), no need to put anything there."),(0,a.kt)("p",null,"This feature is compatible with the ",(0,a.kt)("a",{parentName:"p",href:"../types/translatable/external/diff-crate"},"mirroring")," feature as well."))}p.isMDXComponent=!0}}]);