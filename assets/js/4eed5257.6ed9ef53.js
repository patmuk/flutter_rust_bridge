"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[3532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9474:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={},l="Proxy",i={unversionedId:"guides/miscellaneous/proxy",id:"guides/miscellaneous/proxy",title:"Proxy",description:"When annotating a method with #[frb(proxy)],",source:"@site/docs/guides/miscellaneous/proxy.md",sourceDirName:"guides/miscellaneous",slug:"/guides/miscellaneous/proxy",permalink:"/flutter_rust_bridge/guides/miscellaneous/proxy",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/miscellaneous/proxy.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Run in build.rs",permalink:"/flutter_rust_bridge/guides/miscellaneous/build-rs"},next:{title:"Expanding macros",permalink:"/flutter_rust_bridge/guides/miscellaneous/expanding-macros"}},u={},s=[{value:"Example",id:"example",level:2},{value:"Scenario",id:"scenario",level:3},{value:"Remark: Alternative solutions",id:"remark-alternative-solutions",level:3},{value:"(Optional) Under the hood",id:"optional-under-the-hood",level:3}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"proxy"},"Proxy"),(0,o.kt)("p",null,"When annotating a method with ",(0,o.kt)("inlineCode",{parentName:"p"},"#[frb(proxy)]"),",\nthe method will be allowed to return a reference type,\nand the behavior will be explained below."),(0,o.kt)("p",null,"Typically, this can be used to expose struct or enum fields."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("h3",{id:"scenario"},"Scenario"),(0,o.kt)("p",null,"Consider the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[frb(opaque)]\npub struct BiquadFilterNode {\n    frequency: AudioParam,\n}\n\nimpl BiquadFilterNode {\n    pub fn frequency(&self) -> &AudioParam {\n        &self.frequency\n    }\n}\n\npub struct AudioParam { ... }\n\nimpl AudioParam {\n    pub fn my_method_one(&self, value: f32) { ... }\n    pub fn my_method_two(&self, value: f32) { ... }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge"),' will not be able to generate code for it, since the return type being a reference type\nis not supported yet (and if implemented, may have problems such as "borrowing for too long").\nHowever, if we add ',(0,o.kt)("inlineCode",{parentName:"p"},"#[frb(proxy)]")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"fn"),", then it will work well."),(0,o.kt)("h3",{id:"remark-alternative-solutions"},"Remark: Alternative solutions"),(0,o.kt)("p",null,"As is mentioned in ",(0,o.kt)("a",{parentName:"p",href:"../how-to/borrowed"},"this page"),", one alternative solution is to use ",(0,o.kt)("inlineCode",{parentName:"p"},"clone"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn get_my_sub_struct(&self) -> MySubStruct {\n    self.frequency.clone()\n}\n")),(0,o.kt)("p",null,"Another solution is that, we can also utilize ",(0,o.kt)("inlineCode",{parentName:"p"},"Arc")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque")," (which is essentially an ",(0,o.kt)("inlineCode",{parentName:"p"},"Arc")," with something else):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"frequency: RustAutoOpaque<AudioParam>,\n")),(0,o.kt)("h3",{id:"optional-under-the-hood"},"(Optional) Under the hood"),(0,o.kt)("p",null,"Shortly speaking,\nthe generated code has similar idea to the code below, but the exact details is better.\nI will elaborate more if you are interested in it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"impl BiquadFilterNode {\n    pub fn frequency_my_method_one(&self, value: f32) {\n        self.frequency.my_method_one(value)\n    }\n\n    pub fn frequency_my_method_two(&self, value: f32) {\n        self.frequency.my_method_two(value)\n    }\n}\n")))}c.isMDXComponent=!0}}]);