"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[7269],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,h=d["".concat(l,".").concat(f)]||d[f]||c[f]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7555:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={},i="Borrowed types",s={unversionedId:"guides/how-to/borrowed",id:"guides/how-to/borrowed",title:"Borrowed types",description:"flutterrustbridge does not yet support types with arbitrary borrowing and lifetime",source:"@site/docs/guides/how-to/borrowed.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/borrowed",permalink:"/flutter_rust_bridge/guides/how-to/borrowed",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/borrowed.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Git Ignore",permalink:"/flutter_rust_bridge/guides/how-to/gitignore"},next:{title:"Rust compilation",permalink:"/flutter_rust_bridge/guides/how-to/rust-compilation"}},l={},u=[{value:"Proxy",id:"proxy",level:2},{value:"Shared ownership",id:"shared-ownership",level:2},{value:"Clone",id:"clone",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"borrowed-types"},"Borrowed types"),(0,o.kt)("p",null,"flutter_rust_bridge does not yet support types with ",(0,o.kt)("em",{parentName:"p"},"arbitrary")," borrowing and lifetime\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},"struct MyStruct<'a> { ... }"),",\nor functions that return arbitrary reference types,\nsince this has not been a blocker for users and there are alternative approaches.\nHowever, if you do need to have this feature, feel free to open an issue and we can discuss/implement it!\nBelow, we discuss several approaches for some scenarios."),(0,o.kt)("h2",{id:"proxy"},"Proxy"),(0,o.kt)("p",null,"The proxy feature can be utilized when the borrowed type is indeed a field of struct or something like that.\nPlease refer to ",(0,o.kt)("a",{parentName:"p",href:"../miscellaneous/proxy"},"this page")," for more details."),(0,o.kt)("h2",{id:"shared-ownership"},"Shared ownership"),(0,o.kt)("p",null,"One alternative approach is to use shared ownership.\nFor example, for the example above, we can rewrite as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"struct MyStruct {\n    field: Arc<Another>,\n}\n")),(0,o.kt)("p",null,"As a side remark, if you want to expose that field to Dart side in opaque struct,\nyou can also wrap as ",(0,o.kt)("inlineCode",{parentName:"p"},"RustAutoOpaque<Another>"),"."),(0,o.kt)("h2",{id:"clone"},"Clone"),(0,o.kt)("p",null,"Yet another way is to simply clone related things when returned, instead of returning a reference.\nThis is especially reasonable when the resource being cloned is not heavy."))}c.isMDXComponent=!0}}]);